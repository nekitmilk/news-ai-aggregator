import logging
import time
import os
from transformers import pipeline

logger = logging.getLogger("CategorizerManager")
logger.setLevel(logging.INFO)
ch = logging.StreamHandler()
formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)

class CategorizerManager:
    def __init__(self, device=0):
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CategorizerManager...")
        start = time.time()

        model_name = "cointegrated/rubert-base-cased-nli-threeway"
        cache_dir = os.environ.get("HF_HOME", "/root/.cache/huggingface")

        logger.info(f"‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º Zero-Shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä {model_name} –Ω–∞ device={device} —Å cache_dir={cache_dir}...")
        self.classifier = pipeline(
            "zero-shot-classification",
            model=model_name,
            tokenizer=model_name,
            device=device,
            cache_dir=cache_dir
        )

        self.CATEGORIES = [
            "–ø–æ–ª–∏—Ç–∏–∫–∞",
            "—ç–∫–æ–Ω–æ–º–∏–∫–∞",
            "–æ–±—â–µ—Å—Ç–≤–æ",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "—Å–ø–æ—Ä—Ç",
            "–∫—É–ª—å—Ç—É—Ä–∞",
            "–Ω–∞—É–∫–∞",
            "–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è",
            "–¥—Ä—É–≥–æ–µ"
        ]

        logger.info(f"‚úÖ CategorizerManager –≥–æ—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {time.time() - start:.2f} —Å–µ–∫)")

    def categorize(self, text: str, top_k=1):
        if not text.strip():
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
            return [], 0.0

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        start_time = time.time()

        result = self.classifier(
            text,
            candidate_labels=self.CATEGORIES,
            multi_label=False
        )

        categories = [
            {"label": label, "score": score}
            for label, score in zip(result["labels"], result["scores"])
        ]

        end_time = time.time()
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        return categories[:top_k], end_time - start_time