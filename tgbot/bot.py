import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

API_URL = os.getenv("API_URL", "http://backend:8000/api/v1")
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not provided")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------------------------
# –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------
user_selected_sources = {}      # user_id -> set(id –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
user_sources_cache = {}         # user_id -> —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

user_selected_categories = {}   # user_id -> set(id –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
user_categories_cache = {}      # user_id -> —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

user_keywords = {}              # user_id -> str
user_waiting_keyword = {}       # user_id -> bool (–æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞)

user_pages = {}                 # user_id -> —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

NEWS_LIMIT = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# ---------------------------
def main_reply_keyboard() -> types.ReplyKeyboardMarkup:
    buttons = [
        [types.KeyboardButton(text="–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")],
        [types.KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")],
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
# ---------------------------
def filters_inline_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        [types.InlineKeyboardButton(text="–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="choose_sources")],
        [types.InlineKeyboardButton(text="–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="choose_categories")],
        [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="set_keywords")],
        [types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="reset_keywords")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
# ---------------------------
def build_sources_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    sources = user_sources_cache.get(user_id, [])
    selected = user_selected_sources.get(user_id, set())
    keyboard_buttons = []

    all_selected = len(selected) == len(sources) and len(sources) > 0
    keyboard_buttons.append([types.InlineKeyboardButton(
        text="–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        callback_data="toggle_all_sources"
    )])

    for source in sources:
        checked = "‚úÖ" if source["id"] in selected else "‚ùå"
        keyboard_buttons.append([types.InlineKeyboardButton(
            text=f"{checked} {source['name']}",
            callback_data=f"source_{source['id']}"
        )])

    keyboard_buttons.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done_sources")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# ---------------------------
def build_categories_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    categories = user_categories_cache.get(user_id, [])
    selected = user_selected_categories.get(user_id, set())
    keyboard_buttons = []

    all_selected = len(selected) == len(categories) and len(categories) > 0
    keyboard_buttons.append([types.InlineKeyboardButton(
        text="–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        callback_data="toggle_all_categories"
    )])

    for category in categories:
        checked = "‚úÖ" if category["id"] in selected else "‚ùå"
        keyboard_buttons.append([types.InlineKeyboardButton(
            text=f"{checked} {category['name']}",
            callback_data=f"category_{category['id']}"
        )])

    keyboard_buttons.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done_categories")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë"
# ---------------------------
def more_news_keyboard(page: int = 2) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë", callback_data=f"more_news_{page}")]
    ])

# ---------------------------
# /start
# ---------------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=main_reply_keyboard()
    )

# ---------------------------
# –ù–∞–∂–∞—Ç–∏–µ "–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
# ---------------------------
@dp.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def set_filters(message: types.Message):
    await message.answer(
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=filters_inline_keyboard()
    )

# ---------------------------
# –ù–∞–∂–∞—Ç–∏–µ "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
# ---------------------------
@dp.message(lambda message: message.text == "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def reset_filters(message: types.Message):
    user_id = message.from_user.id
    user_selected_sources.pop(user_id, None)
    user_selected_categories.pop(user_id, None)
    user_keywords.pop(user_id, None)
    user_waiting_keyword[user_id] = False
    user_pages.pop(user_id, None)
    await message.answer("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.")

# ---------------------------
# –ù–∞–∂–∞—Ç–∏–µ "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"
# ---------------------------
@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
async def get_filtered_news(message: types.Message):
    user_id = message.from_user.id
    await send_news(user_id, message, page=1)

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
# ---------------------------
async def send_news(user_id: int, message_or_query, page: int = 1):
    source_ids = ",".join(user_selected_sources.get(user_id, []))
    category_ids = ",".join(user_selected_categories.get(user_id, []))
    search = user_keywords.get(user_id, "").strip()

    params = {"limit": NEWS_LIMIT, "page": page, "sort_order": "desc"}
    if source_ids:
        params["source_ids"] = source_ids
    if category_ids:
        params["category_ids"] = category_ids
    if search:
        params["search"] = search

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL.rstrip('/')}/news", params=params, timeout=10) as resp:
                data = await resp.json()
                if not data.get("success", True):
                    await message_or_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: " + data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    return

                news_list = data.get("result", [])
                if not news_list:
                    await message_or_query.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                    return

                text_messages = []
                for news in news_list:
                    text_messages.append(
                        f"üìå [{news.get('category','–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}] {news.get('title','–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')} ({news.get('source','')})\n"
                        f"{news.get('summary','')}\n"
                        f"üìÖ {news.get('date','')}\n"
                        f"üîó {news.get('url','')}"
                    )

                user_pages[user_id] = page

                await message_or_query.answer(
                    "\n\n".join(text_messages),
                    reply_markup=more_news_keyboard(page + 1) if len(news_list) == NEWS_LIMIT else None
                )

                if len(news_list) < NEWS_LIMIT:
                    await message_or_query.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        except Exception as e:
            await message_or_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

# ---------------------------
# "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë"
# ---------------------------
@dp.callback_query(lambda c: c.data and c.data.startswith("more_news_"))
async def more_news_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    page = int(query.data.replace("more_news_", ""))
    await send_news(user_id, query.message, page)
    await query.answer()

# ---------------------------
# Inline callback —Ñ–∏–ª—å—Ç—Ä—ã
# ---------------------------
@dp.callback_query()
async def process_selection(query: types.CallbackQuery):
    user_id = query.from_user.id
    data = query.data

    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if data == "choose_sources":
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{API_URL.rstrip('/')}/sources", timeout=10) as resp:
                    data = await resp.json()
                    sources = data.get("result", [])
                    user_sources_cache[user_id] = sources
                    if user_id not in user_selected_sources or not user_selected_sources[user_id]:
                        user_selected_sources[user_id] = {s["id"] for s in sources}
                    keyboard = build_sources_keyboard(user_id)
                    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", reply_markup=keyboard)
                    await query.answer()
            except Exception as e:
                await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
                await query.answer()
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if data == "choose_categories":
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{API_URL.rstrip('/')}/categories", timeout=10) as resp:
                    data = await resp.json()
                    categories = data.get("result", [])
                    user_categories_cache[user_id] = categories
                    if user_id not in user_selected_categories or not user_selected_categories[user_id]:
                        user_selected_categories[user_id] = {c["id"] for c in categories}
                    keyboard = build_categories_keyboard(user_id)
                    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)
                    await query.answer()
            except Exception as e:
                await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
                await query.answer()
        return

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if data == "set_keywords":
        user_waiting_keyword[user_id] = True
        await query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_keyword_input")]
                ]
            )
        )
        await query.answer()
        return

    if data == "cancel_keyword_input":
        user_waiting_keyword[user_id] = False
        await query.message.answer("–í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_reply_keyboard())
        await query.answer()
        return

    if data == "reset_keywords":
        user_keywords.pop(user_id, None)
        user_waiting_keyword[user_id] = False
        await query.message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å–±—Ä–æ—à–µ–Ω.", reply_markup=main_reply_keyboard())
        await query.answer()
        return

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("source_"):
        source_id = data.replace("source_", "")
        selected = user_selected_sources.setdefault(user_id, set())
        if source_id in selected: selected.remove(source_id)
        else: selected.add(source_id)
        await query.message.edit_reply_markup(reply_markup=build_sources_keyboard(user_id))
        await query.answer()
        return

    if data.startswith("category_"):
        category_id = data.replace("category_", "")
        selected = user_selected_categories.setdefault(user_id, set())
        if category_id in selected: selected.remove(category_id)
        else: selected.add(category_id)
        await query.message.edit_reply_markup(reply_markup=build_categories_keyboard(user_id))
        await query.answer()
        return

    if data == "toggle_all_sources":
        sources = user_sources_cache.get(user_id, [])
        if len(user_selected_sources.get(user_id,set())) == len(sources):
            user_selected_sources[user_id] = set()
        else:
            user_selected_sources[user_id] = {s["id"] for s in sources}
        await query.message.edit_reply_markup(reply_markup=build_sources_keyboard(user_id))
        await query.answer()
        return

    if data == "toggle_all_categories":
        categories = user_categories_cache.get(user_id, [])
        if len(user_selected_categories.get(user_id,set())) == len(categories):
            user_selected_categories[user_id] = set()
        else:
            user_selected_categories[user_id] = {c["id"] for c in categories}
        await query.message.edit_reply_markup(reply_markup=build_categories_keyboard(user_id))
        await query.answer()
        return

    if data == "done_sources":
        selected_ids = user_selected_sources.get(user_id, set())
        sources = user_sources_cache.get(user_id, [])
        selected_sources = [s for s in sources if s["id"] in selected_ids]
        if selected_sources:
            text = "\n".join(f"{s['name']} ({s.get('domain','')})" for s in selected_sources)
            await query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n{text}")
        else:
            await query.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
        await query.answer()
        return

    if data == "done_categories":
        selected_ids = user_selected_categories.get(user_id, set())
        categories = user_categories_cache.get(user_id, [])
        selected_categories = [c for c in categories if c["id"] in selected_ids]
        if selected_categories:
            text = "\n".join(c['name'] for c in selected_categories)
            await query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{text}")
        else:
            await query.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await query.answer()
        return

# ---------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
@dp.message()
async def process_text(message: types.Message):
    user_id = message.from_user.id
    waiting = user_waiting_keyword.get(user_id, False)

    if waiting and message.content_type != "text":
        await message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É).")
        return

    if message.content_type != "text":
        await message.answer("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üòä")
        return

    text = message.text.strip()

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        user_waiting_keyword[user_id] = False
        await message.answer("–í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_reply_keyboard())
        return

    if text in ["–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"]:
        return

    if not waiting:
        await message.answer("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üòä")
        return

    user_waiting_keyword[user_id] = False
    user_keywords[user_id] = text
    await message.answer(
        f"üîç –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n<b>{text}</b>",
        parse_mode="HTML",
        reply_markup=main_reply_keyboard()
    )

# ---------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
