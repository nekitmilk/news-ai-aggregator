import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

API_URL = os.getenv("API_URL", "http://backend:8000/api/v1")
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not provided")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------------------------
# –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------
user_selected_sources = {}      # user_id -> set(id –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
user_sources_cache = {}         # user_id -> —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

user_selected_categories = {}   # user_id -> set(id –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
user_categories_cache = {}      # user_id -> —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

user_keywords = {}              # user_id -> str
user_waiting_keyword = {}       # user_id -> bool (–æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞)

user_pages = {}                 # user_id -> —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

NEWS_LIMIT = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def ensure_user_initialized(user_id: int):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏."""
    user_selected_sources.setdefault(user_id, set())
    user_sources_cache.setdefault(user_id, [])
    user_selected_categories.setdefault(user_id, set())
    user_categories_cache.setdefault(user_id, [])
    user_keywords.setdefault(user_id, "")
    user_waiting_keyword.setdefault(user_id, False)
    user_pages.setdefault(user_id, 1)

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# ---------------------------
def main_reply_keyboard() -> types.ReplyKeyboardMarkup:
    buttons = [
        [types.KeyboardButton(text="–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")],
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")],
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
# ---------------------------
def filters_inline_keyboard() -> types.InlineKeyboardMarkup:
    buttons = [
        [types.InlineKeyboardButton(text="–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="choose_sources")],
        [types.InlineKeyboardButton(text="–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="choose_categories")],
        [types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="set_keywords")],
        [types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_all_filters")],
        [types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="save_filters")],
        [types.InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="get_saved_filters")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)
# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
# ---------------------------
def build_sources_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    sources = user_sources_cache.get(user_id, [])
    selected = user_selected_sources.get(user_id, set())
    keyboard_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ / –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö"
    all_selected = len(selected) == len(sources) and len(sources) > 0
    keyboard_buttons.append([types.InlineKeyboardButton(
        text="–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        callback_data="toggle_all_sources"
    )])

    # –ö–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
    row = []
    for source in sources:
        checked = "‚úÖ" if source["id"] in selected else "‚ùå"
        btn = types.InlineKeyboardButton(
            text=f"{checked} {source['name']}",
            callback_data=f"source_{source['id']}"
        )
        row.append(btn)
        if len(row) == 2:
            keyboard_buttons.append(row)
            row = []
    if row:  # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ —á–∏—Å–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ—á—ë—Ç–Ω–æ–µ
        keyboard_buttons.append(row)
    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    keyboard_buttons.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done_sources")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# ---------------------------
def build_categories_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    categories = user_categories_cache.get(user_id, [])
    selected = user_selected_categories.get(user_id, set())
    keyboard_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ / –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö"
    all_selected = len(selected) == len(categories) and len(categories) > 0
    keyboard_buttons.append([types.InlineKeyboardButton(
        text="–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        callback_data="toggle_all_categories"
    )])

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 2 –≤ —Ä—è–¥
    row = []
    for category in categories:
        checked = "‚úÖ" if category["id"] in selected else "‚ùå"
        btn = types.InlineKeyboardButton(
            text=f"{checked} {category['name']}",
            callback_data=f"category_{category['id']}"
        )
        row.append(btn)
        if len(row) == 2:
            keyboard_buttons.append(row)
            row = []
    if row:  # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ —á–∏—Å–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—á—ë—Ç–Ω–æ–µ
        keyboard_buttons.append(row)

    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    keyboard_buttons.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done_categories")])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


# ---------------------------
# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë"
# ---------------------------
def more_news_keyboard(page: int = 2) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë", callback_data=f"more_news_{page}")]
    ])

# ---------------------------
# /start
# ---------------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    ensure_user_initialized(user_id)

    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±—ç–∫–µ–Ω–¥–µ ---
    async with aiohttp.ClientSession() as session:
        headers = {"X-User-ID": str(user_id)}
        try:
            async with session.get(f"{API_URL.rstrip('/')}/users/filters/{user_id}", headers=headers, timeout=10) as resp:
                data = await resp.json()
                if resp.status != 200 or not data.get("success", True):
                    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                    payload = {
                        "source": [],
                        "category": [],
                        "search": None,
                        "start_date": None,
                        "end_date": None,
                        "sort": "desc"
                    }
                    try:
                        async with session.post(f"{API_URL.rstrip('/')}/users/filters/", json=payload, headers=headers, timeout=10) as post_resp:
                            # –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–µ–ª–∞–µ–º —Ç–∏—Ö–æ
                            await post_resp.json()
                    except Exception:
                        pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        except Exception:
            pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

    # --- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–≤–æ–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=main_reply_keyboard()
    )


# ---------------------------
# –ù–∞–∂–∞—Ç–∏–µ "–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
# ---------------------------
@dp.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def set_filters(message: types.Message):
    user_id = message.from_user.id
    ensure_user_initialized(user_id)
    await message.answer(
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=filters_inline_keyboard()
    )

# ---------------------------
# –ù–∞–∂–∞—Ç–∏–µ "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"
# ---------------------------
@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
async def get_filtered_news(message: types.Message):
    user_id = message.from_user.id
    ensure_user_initialized(user_id)
    await send_news(user_id, message, page=1)

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------
async def save_filters_to_backend(user_id: int):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ int
    sources = [int(s) for s in user_selected_sources.get(user_id, [])]
    categories = [int(c) for c in user_selected_categories.get(user_id, [])]
    keyword = user_keywords.get(user_id, None)

    payload = {
        "source": sources,          # —Å–ø–∏—Å–æ–∫ int
        "category": categories,     # —Å–ø–∏—Å–æ–∫ int
        "search": keyword or None,  # –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        "start_date": None,         # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        "end_date": None,           # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        "sort": "desc"              # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    }

    headers = {"X-User-ID": str(user_id)}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(f"{API_URL.rstrip('/')}/users/filters/", json=payload, headers=headers, timeout=10) as resp:
                data = await resp.json()
                if resp.status != 200 or not data.get("success", True):
                    return False, data.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return True, "–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        except Exception as e:
            return False, str(e)
# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
# ---------------------------
async def get_saved_filters(user_id: int):
    headers = {"X-User-ID": str(user_id)}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL.rstrip('/')}/users/filters/{user_id}", headers=headers, timeout=10) as resp:
                data = await resp.json()
                if resp.status != 200 or not data.get("success", True):
                    return None, data.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
                
                result = data.get("result", {})

                # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ str –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å callback_data
                sources = [str(s) for s in result.get("source", [])]
                categories = [str(c) for c in result.get("category", [])]
                search = result.get("search") or None

                return {"source": sources, "category": categories, "search": search}, "–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"
        except Exception as e:
            return None, str(e)

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
# ---------------------------
async def send_news(user_id: int, message_or_query, page: int = 1):
    source_ids = ",".join(user_selected_sources.get(user_id, []))
    category_ids = ",".join(user_selected_categories.get(user_id, []))
    search = user_keywords.get(user_id, "").strip()

    params = {"limit": NEWS_LIMIT, "page": page, "sort_order": "desc"}
    if source_ids:
        params["source_ids"] = source_ids
    if category_ids:
        params["category_ids"] = category_ids
    if search:
        params["search"] = search

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL.rstrip('/')}/news", params=params, timeout=10) as resp:
                data = await resp.json()
                if not data.get("success", True):
                    await message_or_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: " + data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    return

                news_list = data.get("result", [])
                if not news_list:
                    await message_or_query.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                    return

                user_pages[user_id] = page

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –æ–¥–Ω–æ–π
                for news in news_list:
                    await message_or_query.answer(
                        f"üìå [{news.get('category','–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}] {news.get('title','–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')} ({news.get('source','')})\n"
                        f"{news.get('summary','')}\n"
                        f"üìÖ {news.get('date','')}\n"
                        f"üîó {news.get('url','')}"
                    )

                # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if len(news_list) < NEWS_LIMIT:
                    await message_or_query.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

        except Exception as e:
            await message_or_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

# ---------------------------
# "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë"
# ---------------------------
@dp.callback_query(lambda c: c.data and c.data.startswith("more_news_"))
async def more_news_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    page = int(query.data.replace("more_news_", ""))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await send_news(user_id, query.message, page)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë:",
        reply_markup=more_news_keyboard(page + 1)
    )

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
    await query.answer()

# ---------------------------
# Inline callback —Ñ–∏–ª—å—Ç—Ä—ã
# ---------------------------
@dp.callback_query()
async def process_selection(query: types.CallbackQuery):
    user_id = query.from_user.id
    data = query.data

    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if data == "choose_sources":
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{API_URL.rstrip('/')}/sources", timeout=10) as resp:
                    data = await resp.json()
                    sources = data.get("result", [])
                    user_sources_cache[user_id] = sources
                    if user_id not in user_selected_sources or not user_selected_sources[user_id]:
                        user_selected_sources[user_id] = {s["id"] for s in sources}
                    keyboard = build_sources_keyboard(user_id)
                    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", reply_markup=keyboard)
                    await query.answer()
            except Exception as e:
                await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
                await query.answer()
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if data == "choose_categories":
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{API_URL.rstrip('/')}/categories", timeout=10) as resp:
                    data = await resp.json()
                    categories = data.get("result", [])
                    user_categories_cache[user_id] = categories
                    if user_id not in user_selected_categories or not user_selected_categories[user_id]:
                        user_selected_categories[user_id] = {c["id"] for c in categories}
                    keyboard = build_categories_keyboard(user_id)
                    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)
                    await query.answer()
            except Exception as e:
                await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
                await query.answer()
        return

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if data == "set_keywords":
        user_waiting_keyword[user_id] = True
        current_keyword = user_keywords.get(user_id)
        current_text = f"\n\nüîπ –¢–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{current_keyword}</b>" if current_keyword else "\n\nüîπ –¢–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: –Ω–µ –∑–∞–¥–∞–Ω–æ"
        
        sent_msg = await query.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞:{current_text}",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_keyword_input")],
                    [types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="reset_keywords")],
                ]
            )
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        user_waiting_keyword[user_id] = sent_msg.message_id
        await query.answer()
        return


    if data == "cancel_keyword_input":
        user_waiting_keyword[user_id] = False

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" (—Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞)
        try:
            await query.message.delete()
        except Exception:
            pass

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–µ—Å–ª–∏ –±—ã–ª–æ —Ä–∞–Ω–µ–µ)
        current_keyword = user_keywords.get(user_id)
        if current_keyword:
            text = f"‚ùå –í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.\nüîπ –¢–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{current_keyword}</b>"
        else:
            text = "‚ùå –í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.\nüîπ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –∑–∞–¥–∞–Ω–æ."

        await query.message.answer(text, parse_mode="HTML", reply_markup=main_reply_keyboard())
        await query.answer()
        return

    if data == "reset_keywords":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        waiting_msg_id = user_waiting_keyword.get(user_id)
        if waiting_msg_id:
            try:
                await bot.delete_message(user_id, waiting_msg_id)
            except Exception:
                pass

        user_keywords.pop(user_id, None)
        user_waiting_keyword[user_id] = False
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        # (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Å–±—Ä–æ—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º)
        await query.message.answer("‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ.", reply_markup=main_reply_keyboard())
        await query.answer()
        return

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("source_"):
        source_id = data.replace("source_", "")
        selected = user_selected_sources.setdefault(user_id, set())
        if source_id in selected: selected.remove(source_id)
        else: selected.add(source_id)
        await query.message.edit_reply_markup(reply_markup=build_sources_keyboard(user_id))
        await query.answer()
        return

    if data.startswith("category_"):
        category_id = data.replace("category_", "")
        selected = user_selected_categories.setdefault(user_id, set())
        if category_id in selected: selected.remove(category_id)
        else: selected.add(category_id)
        await query.message.edit_reply_markup(reply_markup=build_categories_keyboard(user_id))
        await query.answer()
        return

    if data == "toggle_all_sources":
        sources = user_sources_cache.get(user_id, [])
        if len(user_selected_sources.get(user_id,set())) == len(sources):
            user_selected_sources[user_id] = set()
        else:
            user_selected_sources[user_id] = {s["id"] for s in sources}
        await query.message.edit_reply_markup(reply_markup=build_sources_keyboard(user_id))
        await query.answer()
        return

    if data == "toggle_all_categories":
        categories = user_categories_cache.get(user_id, [])
        if len(user_selected_categories.get(user_id,set())) == len(categories):
            user_selected_categories[user_id] = set()
        else:
            user_selected_categories[user_id] = {c["id"] for c in categories}
        await query.message.edit_reply_markup(reply_markup=build_categories_keyboard(user_id))
        await query.answer()
        return

    if data == "done_sources":
        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        selected_ids = user_selected_sources.get(user_id, set())
        sources = user_sources_cache.get(user_id, [])
        total = len(sources)
        selected_count = len(selected_ids)

        if selected_count == 0 or selected_count == total:
            await query.message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.")
        else:
            await query.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_count} –∏–∑ {total} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        await query.answer()
        return

    if data == "done_categories":
        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        selected_ids = user_selected_categories.get(user_id, set())
        categories = user_categories_cache.get(user_id, [])
        total = len(categories)
        selected_count = len(selected_ids)

        if selected_count == 0 or selected_count == total:
            await query.message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        else:
            await query.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_count} –∏–∑ {total} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        await query.answer()
        return
    
    # —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    if data == "reset_all_filters":
        user_selected_sources.pop(user_id, None)
        user_selected_categories.pop(user_id, None)
        user_keywords.pop(user_id, None)
        user_waiting_keyword[user_id] = False
        user_pages.pop(user_id, None)
        await query.message.answer("‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")
        await query.answer()
        return
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    if data == "save_filters":
        success, msg = await save_filters_to_backend(user_id)
        await query.message.answer(
            f"{'‚úÖ' if success else '‚ùå'} {msg}",
            reply_markup=main_reply_keyboard()
        )
        await query.answer()
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if data == "get_saved_filters":
        filters, msg = await get_saved_filters(user_id)
        
        if not filters:
            await query.message.answer(f"‚ùå {msg}")
            await query.answer()
            return

        user_selected_sources[user_id] = set(filters["source"])
        user_selected_categories[user_id] = set(filters["category"])
        user_keywords[user_id] = filters["search"]

        sources = filters.get("source", [])
        categories = filters.get("category", [])
        search = filters.get("search", "–Ω–µ –∑–∞–¥–∞–Ω–æ")

        text = (
            f"üìå –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(sources)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n"
            f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {search}"
        )

        await query.message.answer(text, reply_markup=main_reply_keyboard())
        await query.answer()
        return
# ---------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
# ---------------------------
@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
async def show_saved_filters(message: types.Message):
    user_id = message.from_user.id
    filters, msg = await get_saved_filters(user_id)
    
    if not filters:
        await message.answer(f"‚ùå {msg}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    user_selected_sources[user_id] = set(filters["source"])
    user_selected_categories[user_id] = set(filters["category"])
    user_keywords[user_id] = filters["search"]

    sources = filters.get("source", [])
    categories = filters.get("category", [])
    search = filters.get("search", "–Ω–µ –∑–∞–¥–∞–Ω–æ")

    text = (
        f"üìå –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(sources)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n"
        f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {search}"
    )

    await message.answer(text, reply_markup=main_reply_keyboard())

# ---------------------------
# –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
# ---------------------------
@dp.message(lambda message: message.text and "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" in message.text.lower())
async def get_personalized_news(message: types.Message):
    user_id = message.from_user.id
    ensure_user_initialized(user_id)
    page = user_pages.get(user_id, 1)
    await send_personalized_news(user_id, message, page=page)


# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
# ---------------------------
async def send_personalized_news(user_id: int, message_or_query, page: int = 1):
    params = {
        "user_id": user_id,
        "limit": NEWS_LIMIT,
        "page": page
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL.rstrip('/')}/news/recommendations", params=params, timeout=10) as resp:
                data = await resp.json()

                if not data.get("success", True):
                    await message_or_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: " + data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    return

                news_list = data.get("result", [])
                if not news_list:
                    # –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º send_news –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    await send_news(user_id, message_or_query, page=1)
                    return

                user_pages[user_id] = page

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                for news in news_list:
                    await message_or_query.answer(
                        f"üìå [{news.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}] {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')} ({news.get('source', '')})\n"
                        f"{news.get('summary', '')}\n"
                        f"üìÖ {news.get('date', '')}\n"
                        f"üîó {news.get('url', '')}"
                    )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å
                if len(news_list) >= NEWS_LIMIT:
                    await message_or_query.answer(
                        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë", callback_data=f"more_personal_{page + 1}")]
                        ])
                    )
                else:
                    await message_or_query.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.")
        except Exception as e:
            await message_or_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")


# ---------------------------
# Callback "–ü–æ–ª—É—á–∏—Ç—å –µ—â—ë" –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
# ---------------------------
@dp.callback_query(lambda c: c.data and c.data.startswith("more_personal_"))
async def more_personal_news_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    page = int(query.data.replace("more_personal_", ""))

    await send_personalized_news(user_id, query.message, page)
    await query.answer()
# ---------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
@dp.message()
async def process_text(message: types.Message):
    user_id = message.from_user.id
    ensure_user_initialized(user_id)
    waiting = user_waiting_keyword.get(user_id, False)

    # –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–æ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if waiting and message.content_type != "text":
        await message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É).")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    if message.content_type != "text":
        await message.answer("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üòä")
        return

    text = message.text.strip()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã ---
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        user_waiting_keyword[user_id] = False

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        try:
            async for msg in bot.get_chat_history(user_id, limit=5):
                if msg.from_user.id == bot.id and "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ" in msg.text:
                    await bot.delete_message(user_id, msg.message_id)
                    break
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–æ—Ç–º–µ–Ω–∞"
        try:
            await message.delete()
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –±—ã–ª–æ
        current_keyword = user_keywords.get(user_id)
        if current_keyword:
            text_to_send = f"‚ùå –í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.\nüîπ –¢–µ–∫—É—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{current_keyword}</b>"
        else:
            text_to_send = "‚ùå –í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.\nüîπ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –∑–∞–¥–∞–Ω–æ."

        await message.answer(text_to_send, parse_mode="HTML", reply_markup=main_reply_keyboard())
        return

    # --- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if text in ["–ó–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"]:
        return

# --- –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ---
    if waiting:
        user_waiting_keyword[user_id] = False

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        try:
            await bot.delete_message(user_id, waiting)  # user_waiting_keyword[user_id] —Ö—Ä–∞–Ω–∏—Ç message_id –±–æ—Ç–∞
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
        try:
            await message.delete()
        except Exception:
            pass

        if not text:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.", reply_markup=main_reply_keyboard())
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        user_keywords[user_id] = text

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{text}</b>",
            parse_mode="HTML",
            reply_markup=main_reply_keyboard()
        )
        return


    # --- –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∂–¥—ë—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –≤–≤–æ–¥–∞ ---
    await message.answer("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üòä")



# ---------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())